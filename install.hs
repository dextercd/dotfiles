#!/bin/runhaskell

import System.Process
import System.Directory
import Control.Monad
import Control.Monad.Except
import Control.Exception
import Control.Applicative
import Data.List

-- An Operation is an explanation + an action
data Operation = Operation String (IO ())

confirm :: String -> IO Bool
confirm question = putStr (question ++ " [Y/N] ") >> (`elem` ["y", "Y"]) <$> getLine

checkPaths :: [FilePath] -> IO Bool
checkPaths paths = fmap and (sequence $ doesFileExist <$> paths)

exec :: String -> [String] -> IO ()
exec = callProcess

sudoexec :: String -> [String] -> IO ()
sudoexec program args = exec "sudo" $ program : args

installPackages :: IO ()
installPackages = do
  let packageListFile = "packages.list"
  checkPaths [packageListFile]
  packages <- (filter $ not . null) <$> lines <$> readFile packageListFile
  sudoexec "pacman" $ "-S" : "--needed" : packages

relativeDirContents :: FilePath -> IO [FilePath]
relativeDirContents dir = fmap (fmap ((dir ++ "/") ++)) $ listDirectory dir

linkConfigDirs :: IO ()
linkConfigDirs = do
  destination <- (++ "/.config") <$> getHomeDirectory
  dirs <- (mapM makeAbsolute) =<< relativeDirContents "configs"
  exec "ln" $ "-sf" : dirs ++ [destination]

overwriteXinitrc :: IO ()
overwriteXinitrc = do
  xinitFile <- (++ "/.xinitrc") <$> getHomeDirectory
  writeFile xinitFile =<< content
  where content = concat . (fmap (++ "\n")) <$> sequence
                    [return       "# File generated by dotfiles/install.hs"
                    ,makeAbsolute "synaptics.sh"
                    ,return       "exec i3"]

ops :: [Operation]
ops = [Operation "Pacman update" (sudoexec "pacman" ["-Syyu"]),
       Operation "Install Packages" installPackages,
       Operation "Make .config symbolic links" linkConfigDirs,
       Operation "Create .xinitrc" overwriteXinitrc
      ]

confirmDo :: Operation -> IO ()
confirmDo (Operation desc op) = do
  r <- confirm desc
  case r of
    True -> catchError op handler
    False -> return ()
  where handler err = putStrLn $ "Error, " ++ show err

main :: IO ()
main = mapM_ confirmDo ops
