#!/bin/runhaskell

import System.Process
import System.Directory
import Control.Monad
import Control.Monad.Except
import Control.Exception
import Control.Applicative
import Data.List

data Operation = Operation String (IO ())

ask :: String -> IO Bool
ask question = do
  putStr (question ++ " [Y/N] ")
  (`elem` ["y", "Y"]) <$> getLine

checkPaths :: [FilePath] -> IO Bool
checkPaths paths = fmap and (sequence $ doesFileExist <$> paths)

--exec x xs = print x >> print xs
exec = callProcess
sudoexec program args = exec "sudo" $ program:args


installPackages = do
  let packageListFile = "packages.list"
  checkPaths [packageListFile]
  packages <- (filter $ not . null) <$> lines <$> readFile packageListFile
  sudoexec "pacman" $ "-S" : "--needed" : packages

linkConfigDirs = do
  destination <- (++ "/.config") <$> getHomeDirectory
  dirs <- liftA2 (fmap . (++) . (++ "/configs/")) getCurrentDirectory (listDirectory "configs")
  exec "ln" $ "-sf" : dirs ++ [destination]

overwriteXinitrc = do
  xinitFile <- (++ "/.xinitrc") <$> getHomeDirectory
  writeFile xinitFile =<< content
  where content = concat . (fmap (++ "\n")) <$> sequence
                    [return "# File generated by dotfiles/install.hs"
                    ,(++ "/synaptics.sh") <$> getCurrentDirectory
                    ,return "exec i3"]

ops = [Operation "Pacman update" (sudoexec "pacman" ["-Syyu"]),
       Operation "Install Packages" installPackages,
       Operation "Make .config symbolic links" linkConfigDirs,
       Operation "Create .xinitrc" overwriteXinitrc
      ]

askOp (Operation desc op) = do
  r <- ask desc
  case r of
    True -> catchError op handler
    False -> return ()
  where handler err = putStrLn $ "Error, " ++ show err

main :: IO ()
main = mapM_ askOp ops
